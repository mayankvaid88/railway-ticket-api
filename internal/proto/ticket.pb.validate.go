// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: ticket.proto

package proto

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on BookTicketRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *BookTicketRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BookTicketRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BookTicketRequestMultiError, or nil if none found.
func (m *BookTicketRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BookTicketRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := BookTicketRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetFrom()) < 1 {
		err := BookTicketRequestValidationError{
			field:  "From",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetTo()) < 1 {
		err := BookTicketRequestValidationError{
			field:  "To",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetEmailAddress()) < 1 {
		err := BookTicketRequestValidationError{
			field:  "EmailAddress",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return BookTicketRequestMultiError(errors)
	}

	return nil
}

// BookTicketRequestMultiError is an error wrapping multiple validation errors
// returned by BookTicketRequest.ValidateAll() if the designated constraints
// aren't met.
type BookTicketRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BookTicketRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BookTicketRequestMultiError) AllErrors() []error { return m }

// BookTicketRequestValidationError is the validation error returned by
// BookTicketRequest.Validate if the designated constraints aren't met.
type BookTicketRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BookTicketRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BookTicketRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BookTicketRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BookTicketRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BookTicketRequestValidationError) ErrorName() string {
	return "BookTicketRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BookTicketRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBookTicketRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BookTicketRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BookTicketRequestValidationError{}

// Validate checks the field values on BookTicketResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BookTicketResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BookTicketResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BookTicketResponseMultiError, or nil if none found.
func (m *BookTicketResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BookTicketResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for From

	// no validation rules for To

	// no validation rules for Price

	if all {
		switch v := interface{}(m.GetSeat()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BookTicketResponseValidationError{
					field:  "Seat",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BookTicketResponseValidationError{
					field:  "Seat",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSeat()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BookTicketResponseValidationError{
				field:  "Seat",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BookTicketResponseMultiError(errors)
	}

	return nil
}

// BookTicketResponseMultiError is an error wrapping multiple validation errors
// returned by BookTicketResponse.ValidateAll() if the designated constraints
// aren't met.
type BookTicketResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BookTicketResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BookTicketResponseMultiError) AllErrors() []error { return m }

// BookTicketResponseValidationError is the validation error returned by
// BookTicketResponse.Validate if the designated constraints aren't met.
type BookTicketResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BookTicketResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BookTicketResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BookTicketResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BookTicketResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BookTicketResponseValidationError) ErrorName() string {
	return "BookTicketResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BookTicketResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBookTicketResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BookTicketResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BookTicketResponseValidationError{}

// Validate checks the field values on Seat with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Seat) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Seat with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SeatMultiError, or nil if none found.
func (m *Seat) ValidateAll() error {
	return m.validate(true)
}

func (m *Seat) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Number

	// no validation rules for Section

	if len(errors) > 0 {
		return SeatMultiError(errors)
	}

	return nil
}

// SeatMultiError is an error wrapping multiple validation errors returned by
// Seat.ValidateAll() if the designated constraints aren't met.
type SeatMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SeatMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SeatMultiError) AllErrors() []error { return m }

// SeatValidationError is the validation error returned by Seat.Validate if the
// designated constraints aren't met.
type SeatValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SeatValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SeatValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SeatValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SeatValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SeatValidationError) ErrorName() string { return "SeatValidationError" }

// Error satisfies the builtin error interface
func (e SeatValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSeat.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SeatValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SeatValidationError{}

// Validate checks the field values on GetTicketRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetTicketRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTicketRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTicketRequestMultiError, or nil if none found.
func (m *GetTicketRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTicketRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetEmailAddress()) < 1 {
		err := GetTicketRequestValidationError{
			field:  "EmailAddress",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetTicketRequestMultiError(errors)
	}

	return nil
}

// GetTicketRequestMultiError is an error wrapping multiple validation errors
// returned by GetTicketRequest.ValidateAll() if the designated constraints
// aren't met.
type GetTicketRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTicketRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTicketRequestMultiError) AllErrors() []error { return m }

// GetTicketRequestValidationError is the validation error returned by
// GetTicketRequest.Validate if the designated constraints aren't met.
type GetTicketRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTicketRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTicketRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTicketRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTicketRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTicketRequestValidationError) ErrorName() string { return "GetTicketRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetTicketRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTicketRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTicketRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTicketRequestValidationError{}

// Validate checks the field values on CancelTicketRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancelTicketRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelTicketRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelTicketRequestMultiError, or nil if none found.
func (m *CancelTicketRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelTicketRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetEmailAddress()) < 1 {
		err := CancelTicketRequestValidationError{
			field:  "EmailAddress",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CancelTicketRequestMultiError(errors)
	}

	return nil
}

// CancelTicketRequestMultiError is an error wrapping multiple validation
// errors returned by CancelTicketRequest.ValidateAll() if the designated
// constraints aren't met.
type CancelTicketRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelTicketRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelTicketRequestMultiError) AllErrors() []error { return m }

// CancelTicketRequestValidationError is the validation error returned by
// CancelTicketRequest.Validate if the designated constraints aren't met.
type CancelTicketRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelTicketRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelTicketRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelTicketRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelTicketRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelTicketRequestValidationError) ErrorName() string {
	return "CancelTicketRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CancelTicketRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelTicketRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelTicketRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelTicketRequestValidationError{}

// Validate checks the field values on GetSeatsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetSeatsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSeatsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSeatsRequestMultiError, or nil if none found.
func (m *GetSeatsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSeatsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetSection()) < 1 {
		err := GetSeatsRequestValidationError{
			field:  "Section",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetSeatsRequestMultiError(errors)
	}

	return nil
}

// GetSeatsRequestMultiError is an error wrapping multiple validation errors
// returned by GetSeatsRequest.ValidateAll() if the designated constraints
// aren't met.
type GetSeatsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSeatsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSeatsRequestMultiError) AllErrors() []error { return m }

// GetSeatsRequestValidationError is the validation error returned by
// GetSeatsRequest.Validate if the designated constraints aren't met.
type GetSeatsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSeatsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSeatsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSeatsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSeatsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSeatsRequestValidationError) ErrorName() string { return "GetSeatsRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetSeatsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSeatsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSeatsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSeatsRequestValidationError{}

// Validate checks the field values on GetSeatsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetSeatsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSeatsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSeatsResponseMultiError, or nil if none found.
func (m *GetSeatsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSeatsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSeats() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetSeatsResponseValidationError{
						field:  fmt.Sprintf("Seats[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetSeatsResponseValidationError{
						field:  fmt.Sprintf("Seats[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetSeatsResponseValidationError{
					field:  fmt.Sprintf("Seats[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetSeatsResponseMultiError(errors)
	}

	return nil
}

// GetSeatsResponseMultiError is an error wrapping multiple validation errors
// returned by GetSeatsResponse.ValidateAll() if the designated constraints
// aren't met.
type GetSeatsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSeatsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSeatsResponseMultiError) AllErrors() []error { return m }

// GetSeatsResponseValidationError is the validation error returned by
// GetSeatsResponse.Validate if the designated constraints aren't met.
type GetSeatsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSeatsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSeatsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSeatsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSeatsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSeatsResponseValidationError) ErrorName() string { return "GetSeatsResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetSeatsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSeatsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSeatsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSeatsResponseValidationError{}
